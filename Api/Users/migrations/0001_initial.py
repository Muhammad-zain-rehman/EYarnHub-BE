# Generated by Django 4.0.2 on 2022-04-26 13:56

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomAccountManager',
            fields=[
                ('base_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.base')),
            ],
            bases=('main.base',),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('base_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.base')),
                ('name', models.CharField(db_column='Name', max_length=255, unique=True)),
                ('code', models.SlugField(db_column='Code', default='')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('access_level', models.IntegerField(choices=[(800, 'Super_admin'), (600, 'Company'), (400, 'Cargo Company')], db_column='AccessLevel', default=300)),
            ],
            options={
                'db_table': 'ROle',
            },
            bases=('main.base',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('base_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.base')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(db_column='Name', default='', max_length=255)),
                ('is_active', models.BooleanField(db_column='IsActive', default=True, help_text='Designates whether this user should be treated as active.')),
                ('email', models.EmailField(db_column='Email', help_text='Email Field', max_length=254, unique=True)),
                ('image', models.ImageField(blank=True, db_column='ImageField', null=True, upload_to='uploads/')),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether the user can log into this admin site.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('user_role', models.ForeignKey(db_column='RoleId', on_delete=django.db.models.deletion.CASCADE, related_name='user_role', to='Users.role')),
            ],
            options={
                'db_table': 'User',
            },
            bases=('main.base', models.Model),
        ),
    ]
